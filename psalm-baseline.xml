<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="3.10.1@eeed5ecccc10131397f0eb7ee6da810c0be3a7fc">
  <file src="src/FieldDefinition.php">
    <MissingClosureReturnType occurrences="1">
      <code>static function () use (&amp;$n, $funcOrString) {</code>
    </MissingClosureReturnType>
    <MixedArgument occurrences="1">
      <code>$n</code>
    </MixedArgument>
    <MixedOperand occurrences="4">
      <code>$n</code>
      <code>$n</code>
      <code>$n</code>
      <code>$n</code>
    </MixedOperand>
  </file>
  <file src="src/FixtureFactory.php">
    <InvalidArgument occurrences="1">
      <code>$fieldDefinition</code>
    </InvalidArgument>
    <MissingClosureReturnType occurrences="4">
      <code>static function () {</code>
      <code>static function () use ($defaultFieldValue) {</code>
      <code>static function () use ($fieldDefinition) {</code>
      <code>static function () use ($fieldDefinition) {</code>
    </MissingClosureReturnType>
    <MissingParamType occurrences="3">
      <code>$fieldValue</code>
      <code>$array</code>
      <code>$fieldValue</code>
    </MissingParamType>
    <MixedArgument occurrences="3">
      <code>$fieldValue</code>
      <code>$fieldValue</code>
      <code>$inversedBy</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="2">
      <code>$fieldDefinitions</code>
      <code>$fieldOverrides</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="5">
      <code>$defaultFieldValue</code>
      <code>$fieldValues[$fieldName]</code>
      <code>$fieldValue</code>
      <code>$inversedBy</code>
      <code>$collection</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>callable</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$fieldDefinition</code>
    </MixedReturnStatement>
    <TypeDoesNotContainType occurrences="1">
      <code>\method_exists($fieldDefinition, '__invoke')</code>
    </TypeDoesNotContainType>
  </file>
  <file src="test/Fixture/FixtureFactory/Entity/Organization.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$id</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Fixture/FixtureFactory/Entity/Project.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$id</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Fixture/FixtureFactory/Entity/Repository.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$id</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Fixture/FixtureFactory/Entity/User.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>$id</code>
      <code>$organizations</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Integration/FixtureFactoryTest.php">
    <InternalMethod occurrences="1">
      <code>addToAssertionCount</code>
    </InternalMethod>
  </file>
  <file src="test/Unit/EntityDefinitionTest.php">
    <MissingClosureParamType occurrences="1">
      <code>$entity</code>
    </MissingClosureParamType>
  </file>
  <file src="test/Unit/FixtureFactoryTest.php">
    <MixedArgument occurrences="2">
      <code>$name</code>
      <code>$fieldValues['name']</code>
    </MixedArgument>
    <PossiblyNullArgument occurrences="1">
      <code>$organization-&gt;name()</code>
    </PossiblyNullArgument>
    <RedundantCondition occurrences="4">
      <code>assertNotNull</code>
      <code>assertNotNull</code>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
    </RedundantCondition>
  </file>
</files>
